{"version":3,"sources":["components/Chart.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["MyChart","data","Container","App","getTemps","a","fetch","method","res","json","console","log","JSON","parse","body","setChartData","useReducer","state","action","labels","length","datasets","label","inside","fill","borderColor","outside","chartData","useEffect","setInterval","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAKe,SAASA,EAAT,GAAmD,IAAjCC,EAAgC,EAAhCA,KAC7B,OACI,cAACC,EAAA,EAAD,UACI,cAAC,OAAD,CAAMD,KAAMA,MCiFTE,MArEf,WAAgB,SACCC,IADF,2EACb,8BAAAC,EAAA,sEACkBC,MAAM,6EAA8E,CAClGC,OAAQ,QAFZ,cACMC,EADN,gBAImBA,EAAIC,OAJvB,OAIMA,EAJN,OAKEC,QAAQC,IAAIC,KAAKC,MAAMJ,EAAKK,OAC5BC,EAAaH,KAAKC,MAAMJ,EAAKK,OAN/B,4CADa,4BAiCqBE,sBAvBlC,SAAiBC,EAAwBC,GAoBvC,OAnBIA,EAAOC,OAAOC,SAChBH,EAAQ,CACNE,OAAQD,EAAOC,OACfE,SAAU,CACR,CACEC,MAAO,SACPrB,KAAMiB,EAAOK,OACbC,MAAM,EACNC,YAAa,QAEf,CACEH,MAAO,UACPrB,KAAMiB,EAAOQ,QACbF,MAAM,EACNC,YAAa,YAKdR,IAG6C,CACpDE,OAAQ,GACRE,SAAU,CACR,CACEC,MAAO,SACPrB,KAAM,GACNuB,MAAM,EACNC,YAAa,QAEf,CACEH,MAAO,UACPrB,KAAM,GACNuB,MAAM,EACNC,YAAa,YA9CN,mBAiCNE,EAjCM,KAiCKZ,EAjCL,KAyDb,OANAa,qBAAU,WACRxB,IACAyB,YAAYzB,EAAU,OAEpB,IAGF,sBAAK0B,UAAU,MAAf,UACE,iCACE,4CAEF,qBAAKA,UAAU,WAAf,SACE,cAAC9B,EAAD,CAASC,KAAM0B,UCrERI,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.6a8f7c28.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Container } from '@material-ui/core';\r\nimport { Line } from \"react-chartjs-2\";\r\nimport {ChartJSDataType} from \"../App\"\r\n\r\nexport default function MyChart({data}: {data: ChartJSDataType}) {\r\n    return (\r\n        <Container>\r\n            <Line data={data} />\r\n        </Container>\r\n    );\r\n}","import React, { useEffect, useReducer } from 'react';\nimport './App.css';\nimport MyChart from './components/Chart'\n\nexport interface DataType {\n  labels: string[],\n  outside: number[],\n  inside: number[]\n}\n\nexport interface ChartJSDataType {\n  labels: string[],\n  datasets: {\n    label: string,\n    data: number[],\n    fill: boolean,\n    borderColor: string\n  }[]\n}\n\nfunction App() {\n  async function getTemps(): Promise<void> {\n    let res = await fetch(`https://cq661ei9wa.execute-api.us-west-2.amazonaws.com/authFree/helloWorld`, {\n      method: 'GET'\n    })\n    let json = await res.json()\n    console.log(JSON.parse(json.body))\n    setChartData(JSON.parse(json.body))\n  }\n\n  function reducer(state: ChartJSDataType, action: DataType): ChartJSDataType {\n    if (action.labels.length) {\n      state = {\n        labels: action.labels,\n        datasets: [\n          {\n            label: \"Inside\",\n            data: action.inside,\n            fill: false,\n            borderColor: \"blue\"\n          },\n          {\n            label: \"Outside\",\n            data: action.outside,\n            fill: false,\n            borderColor: \"green\"\n          }\n        ]\n      }\n    }\n    return state\n  }\n\n  const [chartData, setChartData] = useReducer(reducer, {\n    labels: [],\n    datasets: [\n      {\n        label: \"Inside\",\n        data: [],\n        fill: false,\n        borderColor: \"blue\"\n      },\n      {\n        label: \"Outside\",\n        data: [],\n        fill: false,\n        borderColor: \"green\"\n      }\n    ]\n  })\n\n  useEffect(() => {\n    getTemps()\n    setInterval(getTemps, 600000)\n  }\n    , [])\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>CozyBaby</h1>\n      </header>\n      <div className=\"App-body\">\n        <MyChart data={chartData} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}